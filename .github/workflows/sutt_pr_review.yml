name: Contirbutor requests review - Check payment

on:
  pull_request_target:
    types: [review_requested]

permissions:
  issues: write
  pull-requests: write

jobs:
  check_that_payment:
    runs-on: ubuntu-latest
    steps:
      - name: Echo Confirmation
        run: echo "review requested or review removed"

      - name: Check payment Endpoint
        env:
          INVOICE_KEY: ${{ secrets.INVOICE_KEY_1 }}
        id: check_payment
        run: |
          checking_id="d810916c125b1eb8b25c9133e2d32c5997ce3094e9f4216982180e02f58e06e2"
          response=$(curl -s -X GET \
              -H "X-Api-Key: $INVOICE_KEY" \
              -H "Content-Type: application/json" \
              https://d5aedbf627.d.voltageapp.io/api/v1/payments/$checking_id)
          echo "Server response:"
          echo "$response"

          # get is_paid which is bool
          is_paid=$(echo "$response" | jq -r '.paid')
          echo "payment_request: $payment_request"

          # Use the extracted value in the next step
          echo "::set-output name=is_paid::$is_paid"

      - name: Handle Payment Status
        if: steps.check_payment.outputs.is_paid == 'true'
        run: |
          echo "Payment is confirmed. Proceeding with the review request."

      - name: Contrib HAS paid
        if: steps.check_payment.outputs.is_paid == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const message = `Payment has been recieved, sit tight, running openai query`;
            github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: message
              });

      - name: Contrib has NOT paid
        if: steps.check_payment.outputs.is_paid == 'false'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const message = `You haven't paid yet bro; close then re-open the review request`;
            github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: message
              });

      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Call OpenAI API
        id: openai_request
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          import requests
          import json

          url = "https://api.openai.com/v1/engines/davinci-codex/completions"
          headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {OPENAI_API_KEY}"
          }
          data = {
            "prompt": "Translate the following English text to French: 'Hello, how are you?'",
            "max_tokens": 60
          }

          response = requests.post(url, json=data, headers=headers)
          completion = response.json()["choices"][0]["text"]
          print("Completion:", completion)

          # Write to GITHUB_ENV
          with open(os.getenv('GITHUB_ENV'), 'a') as f:
              f.write(f"COMPLETION={json.dumps(completion)}\n")

      - name: Use Completion Data
        run: |
          echo "The completion data is: $COMPLETION"
      
      # - name: If paid launch hit openai
      #   if: steps.check_payment.outputs.is_paid == 'true'
      #   uses: actions/github-script@v6
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     # OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      #     script: |

      #       const axios = require('axios');
      #       const apiKey = '${{ secrets.OPENAI_API_KEY }}';
      #       const prompt = 'Q: What is the largest planet? A:';

      #       try {
      #         const response = await axios.post('https://api.openai.com/v1/completions', 
      #         {
      #           model: 'text-davinci-002',
      #           prompt: prompt,
      #           max_tokens: 100,
      #           n: 1,
      #           stop: null,
      #           temperature: 0.7        }, 
      #           {
      #             headers: {
      #               'Authorization': `Bearer ${apiKey}`,
      #               'Content-Type': 'application/json'
      #             }    
      #           }
      #         );

      #         const message = response.choices[0].text.trim();

      #         github.rest.issues.createComment({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           issue_number: context.issue.number,
      #           body: message
      #         });
      #       } catch (error) {
      #         console.error('Error:', error);
      #         github.rest.issues.createComment({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           issue_number: context.issue.number,
      #           body: 'An error occurred while generating the response from OpenAI.'
      #         });
      #       }

    # github.pulls.dismissReviewRequest({
    #   owner: context.repo.owner,
    #   repo: context.repo.repo,
    #     pull_number: context.issue.number,
    #     reviewers: [context.payload.requested_reviewer.login]
    #   })
